{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap 6b46f7c1dcfb3213fa79","webpack:///./src/webgl.js","webpack:///./src/index.js","webpack:///./src/programs/gameoflife.js","webpack:///./src/state-program.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","createProgram","vertexSource","fragmentSource","resize","size","Math","pow","floor","log2","min","window","innerWidth","innerHeight","canvas","width","height","style","gl","viewport","document","body","querySelector","getContext","addEventListener","clearColor","clear","COLOR_BUFFER_BIT","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","console","log","fragmentShader","FRAGMENT_SHADER","shaderProgram","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","createTexture","tTexture","activeTexture","TEXTURE0","bindTexture","TEXTURE_2D","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","Object","defineProperty","value","_interopRequireDefault","obj","__esModule","default","draw","golStateProgram","drawState","incrementState","requestAnimationFrame","_stateProgram","_stateProgram2","_gameoflife","_gameoflife2","initialArray","time","i","j","random","setState","ImageData","Uint8ClampedArray","timeEnd","GameOfLife","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","length","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","_webgl","StateProgram","_ref","this","_createProgram","currentState","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","vertices","bufferData","Float32Array","STATIC_DRAW","aPosition","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","uWidth","getUniformLocation","uniform1f","uShouldUpdate","tTexture0","tTexture1","frameBuffer","createFramebuffer","bindFramebuffer","FRAMEBUFFER","texImage2D","RGBA","UNSIGNED_BYTE","renderBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","state","uniform1i","drawArrays","TRIANGLE_STRIP","framebufferTexture2D","COLOR_ATTACHMENT0"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"./\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(2);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.createProgram = createProgram;\n\texports.createTexture = createTexture;\n\tfunction createProgram(vertexSource, fragmentSource) {\n\t\t// GLOBALS\n\t\tvar body = document.body;\n\t\tvar canvas = document.querySelector('canvas');\n\t\tvar gl = canvas.getContext('webgl');\n\t\t// END GLOBALS\n\t\n\t\t// BEGIN WINDOW SIZING\n\t\tfunction resize() {\n\t\t\tvar size = Math.pow(2, Math.floor(Math.log2(Math.min(window.innerWidth, window.innerHeight)))) * 2;\n\t\t\t// const size = 256;\n\t\t\tcanvas.width = size;\n\t\t\tcanvas.height = size;\n\t\t\tcanvas.style.width = size / 2 + 'px';\n\t\t\tcanvas.style.height = size / 2 + 'px';\n\t\n\t\t\t// Set viewport\n\t\t\tgl.viewport(0, 0, canvas.width, canvas.height);\n\t\t}\n\t\tresize();\n\t\n\t\twindow.addEventListener('resize', resize);\n\t\t// END WINDOW SIZING\n\t\n\t\t// GL SETTINGS\n\t\n\t\t// Color to draw on clear\n\t\tgl.clearColor(0, 0, 0, 1);\n\t\n\t\t// Clear buffers\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\n\t\t// END GL SETTINGS\n\t\n\t\t// INITIALIZE SHADERS\n\t\n\t\t// CREATE VERTEX SHADER\n\t\tvar vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\t\tgl.shaderSource(vertexShader, vertexSource);\n\t\tgl.compileShader(vertexShader);\n\t\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(vertexShader));\n\t\t} else {\n\t\t\tconsole.log(\"Vertex shader compiled\");\n\t\t}\n\t\t// END CREATE VERTEX SHADER\n\t\n\t\t// CREATE FRAGMENT SHADER\n\t\tvar fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\tgl.shaderSource(fragmentShader, fragmentSource);\n\t\tgl.compileShader(fragmentShader);\n\t\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(fragmentShader));\n\t\t} else {\n\t\t\tconsole.log(\"Fragment shader compiled\");\n\t\t}\n\t\t// END CREATE FRAGMENT SHADER\n\t\n\t\t// COMPILE PROGRAM\n\t\tvar shaderProgram = gl.createProgram();\n\t\tgl.attachShader(shaderProgram, vertexShader);\n\t\tgl.attachShader(shaderProgram, fragmentShader);\n\t\tgl.linkProgram(shaderProgram);\n\t\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\t\tthrow new Error(\"Unable to initialize the shader program.\");\n\t\t} else {\n\t\t\tconsole.log(\"Initialized shader program\");\n\t\t}\n\t\tgl.useProgram(shaderProgram);\n\t\t// END COMPILE PROGRAM\n\t\n\t\t// END INITIALIZE SHADERS\n\t\n\t\n\t\treturn { gl: gl, shaderProgram: shaderProgram };\n\t}\n\t\n\tfunction createTexture() {\n\t\tvar gl = document.querySelector('canvas').getContext('webgl');\n\t\tvar tTexture = gl.createTexture();\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\treturn tTexture;\n\t}\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _webgl = __webpack_require__(1);\n\t\n\tvar _stateProgram = __webpack_require__(4);\n\t\n\tvar _stateProgram2 = _interopRequireDefault(_stateProgram);\n\t\n\tvar _gameoflife = __webpack_require__(3);\n\t\n\tvar _gameoflife2 = _interopRequireDefault(_gameoflife);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tconsole.log('🐭');\n\t\n\tvar golStateProgram = new _stateProgram2.default({ shaderSource: _gameoflife2.default });\n\t\n\tvar gl = document.querySelector('canvas').getContext('webgl');\n\t\n\t// // const uMousePosition = gl.getUniformLocation(shaderProgram, \"uMousePosition\");\n\t//\n\t//\n\t// // INTERACTION HANDLER\n\t// var mousePosition = [];\n\t// gl.canvas.addEventListener('mousemove', evt => {\n\t//   mousePosition = [\n\t//     (evt.clientX/gl.canvas.width - 0.5) * 2.0,\n\t//     (1.0 - evt.clientY/gl.canvas.height - 0.5) * 2.0\n\t//   ];\n\t// \t// draw();\n\t// });\n\t// END INTERACTION HANDLER\n\t\n\t// DRAW LOOP\n\tgl.clearColor(0, 0, 0, 1.0);\n\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\n\t//Initial state\n\t// const initialCanvas = document.createElement('canvas');\n\t// initialCanvas.width = gl.canvas.width;\n\t// initialCanvas.height = gl.canvas.height;\n\t// const context = initialCanvas.getContext('2d');\n\t// context.globalAlpha = 1.0;\n\tvar initialArray = [];\n\tconsole.time('Init');\n\tfor (var i = 0; i < gl.canvas.width; i++) {\n\t\tfor (var j = 0; j < gl.canvas.height; j++) {\n\t\t\tif (Math.random() < 0.35) {\n\t\t\t\t// context.fillStyle = 'red';\n\t\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4] = 255;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 1] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 2] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 3] = 255;\n\t\t\t} else {\n\t\t\t\t// context.fillStyle = 'black';\n\t\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 1] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 2] = 0.0;\n\t\t\t\tinitialArray[(j * gl.canvas.width + i) * 4 + 3] = 255;\n\t\t\t}\n\t\t}\n\t}\n\t// context.fillStyle = 'red';\n\t// context.fillRect(0, 0, 64, 64);\n\t// golStateProgram.setState(initialCanvas);\n\tgolStateProgram.setState(new ImageData(new Uint8ClampedArray(initialArray), gl.canvas.width, gl.canvas.height));\n\tconsole.timeEnd('Init');\n\t\n\tvar flip = 0;\n\t\n\tfunction draw() {\n\t\t// gl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\t\n\t\tgolStateProgram.drawState();\n\t\tgolStateProgram.incrementState();\n\t\n\t\trequestAnimationFrame(draw);\n\t}\n\trequestAnimationFrame(draw);\n\t// END DRAW LOOP\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\tvar GameOfLife = {\n\t\tvertexSource: \"\\n\\t\\tprecision highp float;\\n\\t\\tattribute vec3 aPosition;\\n\\t\\tvarying vec2 vTexturePosition;\\n\\t\\tvarying vec2 vPosition;\\n\\t\\tvoid main(void) {\\n\\t\\t\\tvPosition = aPosition.xy;\\n\\t\\t\\tvTexturePosition = vec2(aPosition.x + 1.0, -1.0 + aPosition.y) * 0.5;\\n\\t\\t\\tgl_Position = vec4(aPosition, 1.0);\\n\\t\\t}\\n\\t\",\n\t\n\t\tfragmentSource: \"\\n\\t\\tprecision highp float;\\n\\t\\tuniform sampler2D uSampler;\\n\\t\\tvarying vec2 vTexturePosition;\\n\\t\\tvarying vec2 vPosition;\\n\\t\\tuniform vec2 uMousePosition;\\n\\t\\tuniform highp float uWidth;\\n\\t\\tuniform int uShouldUpdate;\\n\\n\\t\\tbool isLive(vec2 offset) {\\n\\t\\t\\t\\tvec4 lastColor = texture2D(uSampler, vTexturePosition + offset);\\n\\t\\t\\t\\tif (lastColor.r == 1.0) {\\n\\t\\t\\t\\t\\treturn true;\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\treturn false;\\n\\t\\t\\t\\t}\\n\\t\\t}\\n\\n\\t\\tvoid main(void) {\\n\\t\\t\\tvec4 lastColor = texture2D(uSampler, vTexturePosition);\\n\\n\\t\\t\\tif (uShouldUpdate == 0) {\\n\\t\\t\\t\\tgl_FragColor = lastColor;\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tfloat d = distance(uMousePosition, vPosition);\\n\\t\\t\\tif (d < 2.0/uWidth) {\\n\\t\\t\\t\\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t\\t\\treturn;\\n\\t\\t\\t}\\n\\n\\t\\t\\tint liveCount = 0;\\n\\t\\t\\tfloat step = 1.0/uWidth;\\n\\n\\t\\t\\tif (isLive(vec2(-step, -step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(-step, 0))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(-step, step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(0, -step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(0, step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(step, -step))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(step, 0))) {liveCount++;}\\n\\t\\t\\tif (isLive(vec2(step, step))) {liveCount++;}\\n\\n\\t\\t\\tif (liveCount < 2) {\\n\\t\\t\\t\\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t\\t} else if (liveCount < 4) {\\n\\t\\t\\t\\tgl_FragColor = vec4(0, 1.0, 0, 1.0);\\n\\t\\t\\t} else if (liveCount < 8) {\\n\\t\\t\\t\\tgl_FragColor = vec4(0, 0, 1.0, 1.0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgl_FragColor = vec4(1.0, 0, 1.0, 1.0);\\n\\t\\t\\t}\\n\\n\\t\\t\\tbool selfIsLive = isLive(vec2(0,0));\\n\\t\\t\\tif (selfIsLive && (liveCount == 2 || liveCount == 3)) {\\n\\t\\t\\t\\tif (lastColor.g < 1.0) {\\n\\t\\t\\t\\t\\tgl_FragColor = lastColor + vec4(1.0, 0.01, 0.0, 1.0);\\n\\t\\t\\t\\t} else {\\n\\t\\t\\t\\t\\tgl_FragColor = lastColor + vec4(1.0, 0.0, 0.01, 1.0);\\n\\t\\t\\t\\t}\\n\\t\\t\\t} else if (!selfIsLive && (liveCount == 3)) {\\n\\t\\t\\t\\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.8);\\n\\t\\t\\t}\\n\\t\\t}\\n\\t\"\n\t};\n\texports.default = GameOfLife;\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _webgl = __webpack_require__(1);\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar StateProgram = function () {\n\t\tfunction StateProgram(_ref) {\n\t\t\tvar shaderSource = _ref.shaderSource;\n\t\n\t\t\t_classCallCheck(this, StateProgram);\n\t\n\t\t\tvar _createProgram = (0, _webgl.createProgram)(shaderSource.vertexSource, shaderSource.fragmentSource),\n\t\t\t    gl = _createProgram.gl,\n\t\t\t    shaderProgram = _createProgram.shaderProgram;\n\t\n\t\t\tthis.gl = gl;\n\t\t\tthis.shaderProgram = shaderProgram;\n\t\t\tthis.currentState = 0;\n\t\n\t\t\t// INITIALIZE BUFFERS\n\t\t\tthis.vertexBuffer = gl.createBuffer();\n\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\tthis.vertices = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0];\n\t\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n\t\t\t// END INITIALIZE BUFFERS\n\t\n\t\t\t// POINTERS\n\t\t\tvar aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\t\t\tgl.enableVertexAttribArray(aPosition);\n\t\t\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\t\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\t\n\t\t\tvar uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\t\t\tgl.uniform1f(uWidth, gl.canvas.width);\n\t\n\t\t\tthis.uShouldUpdate = gl.getUniformLocation(shaderProgram, \"uShouldUpdate\");\n\t\n\t\t\tthis.tTexture0 = (0, _webgl.createTexture)();\n\t\t\tthis.tTexture1 = (0, _webgl.createTexture)();\n\t\n\t\t\tthis.frameBuffer = gl.createFramebuffer();\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\t\tthis.frameBuffer.width = gl.canvas.width;\n\t\t\tthis.frameBuffer.height = gl.canvas.height;\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.frameBuffer.width, this.frameBuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\n\t\t\tvar renderBuffer = gl.createRenderbuffer();\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n\t\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.frameBuffer.width, this.frameBuffer.height);\n\t\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n\t\n\t\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t}\n\t\n\t\t_createClass(StateProgram, [{\n\t\t\tkey: \"setState\",\n\t\t\tvalue: function setState(state) {\n\t\t\t\tvar gl = this.gl;\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, state);\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"drawState\",\n\t\t\tvalue: function drawState() {\n\t\t\t\tvar gl = this.gl;\n\t\t\t\tgl.uniform1i(this.uShouldUpdate, 0);\n\t\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\t\tif (this.currentState == 0) {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\t\t}\n\t\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t\t\t}\n\t\t}, {\n\t\t\tkey: \"incrementState\",\n\t\t\tvalue: function incrementState() {\n\t\t\t\tvar gl = this.gl;\n\t\t\t\tgl.uniform1i(this.uShouldUpdate, 1);\n\t\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\t\t\tif (this.currentState == 0) {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture1, 0);\n\t\t\t\t} else {\n\t\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture0, 0);\n\t\t\t\t}\n\t\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\t\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\t\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\n\t\t\t\tthis.currentState = (this.currentState + 1) % 2;\n\t\t\t}\n\t\t}]);\n\t\n\t\treturn StateProgram;\n\t}();\n\t\n\texports.default = StateProgram;\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 6b46f7c1dcfb3213fa79","export function createProgram(vertexSource, fragmentSource) {\n\t// GLOBALS\n\tconst body = document.body;\n\tconst canvas = document.querySelector('canvas');\n\tconst gl = canvas.getContext('webgl');\n\t// END GLOBALS\n\n\t// BEGIN WINDOW SIZING\n\tfunction resize() {\n\t\tconst size = Math.pow(2,Math.floor(Math.log2(Math.min(window.innerWidth, window.innerHeight))))*2;\n\t\t// const size = 256;\n\t\tcanvas.width = size;\n\t\tcanvas.height = size;\n\t\tcanvas.style.width = size/2 + 'px';\n\t\tcanvas.style.height = size/2 + 'px';\n\n\t\t// Set viewport\n\t\tgl.viewport(0, 0, canvas.width, canvas.height);\n\t}\n\tresize();\n\n\twindow.addEventListener('resize', resize);\n\t// END WINDOW SIZING\n\n\t// GL SETTINGS\n\n\t// Color to draw on clear\n\tgl.clearColor(0,0,0,1);\n\n\t// Clear buffers\n\tgl.clear(gl.COLOR_BUFFER_BIT);\n\n\t// END GL SETTINGS\n\n\t// INITIALIZE SHADERS\n\n\t// CREATE VERTEX SHADER\n\tconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\tgl.shaderSource(vertexShader, vertexSource);\n\tgl.compileShader(vertexShader);\n\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(vertexShader));\n\t}else{\n\t\tconsole.log(\"Vertex shader compiled\");\n\t}\n\t// END CREATE VERTEX SHADER\n\n\t// CREATE FRAGMENT SHADER\n\tconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(fragmentShader, fragmentSource);\n\tgl.compileShader(fragmentShader);\n\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(fragmentShader));\n\t}else{\n\t\tconsole.log(\"Fragment shader compiled\");\n\t}\n\t// END CREATE FRAGMENT SHADER\n\n\t// COMPILE PROGRAM\n\tconst shaderProgram = gl.createProgram();\n\tgl.attachShader(shaderProgram, vertexShader);\n\tgl.attachShader(shaderProgram, fragmentShader);\n\tgl.linkProgram(shaderProgram);\n\n\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\tthrow new Error(\"Unable to initialize the shader program.\");\n\t}else{\n\t\tconsole.log(\"Initialized shader program\");\n\t}\n\tgl.useProgram(shaderProgram);\n\t// END COMPILE PROGRAM\n\n\t// END INITIALIZE SHADERS\n\n\n\treturn {gl, shaderProgram};\n}\n\nexport function createTexture() {\n\tconst gl = document.querySelector('canvas').getContext('webgl');\n\tconst tTexture = gl.createTexture();\n\tgl.activeTexture(gl.TEXTURE0);\n\tgl.bindTexture(gl.TEXTURE_2D, tTexture);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\treturn tTexture;\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/webgl.js","import {createProgram} from './webgl';\nimport StateProgram from './state-program';\nimport GameOfLife from './programs/gameoflife';\n\nconsole.log('🐭');\n\nlet golStateProgram = new StateProgram({shaderSource: GameOfLife});\n\nlet gl = document.querySelector('canvas').getContext('webgl');\n\n// // const uMousePosition = gl.getUniformLocation(shaderProgram, \"uMousePosition\");\n//\n//\n// // INTERACTION HANDLER\n// var mousePosition = [];\n// gl.canvas.addEventListener('mousemove', evt => {\n//   mousePosition = [\n//     (evt.clientX/gl.canvas.width - 0.5) * 2.0,\n//     (1.0 - evt.clientY/gl.canvas.height - 0.5) * 2.0\n//   ];\n// \t// draw();\n// });\n// END INTERACTION HANDLER\n\n// DRAW LOOP\ngl.clearColor(0, 0, 0, 1.0);\ngl.clear(gl.COLOR_BUFFER_BIT);\n\n//Initial state\n// const initialCanvas = document.createElement('canvas');\n// initialCanvas.width = gl.canvas.width;\n// initialCanvas.height = gl.canvas.height;\n// const context = initialCanvas.getContext('2d');\n// context.globalAlpha = 1.0;\nconst initialArray = [];\nconsole.time('Init');\nfor (var i = 0; i < gl.canvas.width; i++) {\n\tfor (var j = 0; j < gl.canvas.height; j++) {\n\t\tif (Math.random() < 0.35) {\n\t\t\t// context.fillStyle = 'red';\n\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4] = 255;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+1] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+2] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+3] = 255;\n\t\t} else {\n\t\t\t// context.fillStyle = 'black';\n\t\t\t// context.fillRect(i, j, 1, 1);\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+1] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+2] = 0.0;\n\t\t\tinitialArray[(j*gl.canvas.width + i)*4+3] = 255;\n\t\t}\n\t}\n}\n// context.fillStyle = 'red';\n// context.fillRect(0, 0, 64, 64);\n// golStateProgram.setState(initialCanvas);\ngolStateProgram.setState(new ImageData(new Uint8ClampedArray(initialArray), gl.canvas.width, gl.canvas.height));\nconsole.timeEnd('Init');\n\n\nlet flip = 0;\n\nfunction draw() {\n\t// gl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\n\tgolStateProgram.drawState();\n\tgolStateProgram.incrementState();\n\n  requestAnimationFrame(draw);\n}\nrequestAnimationFrame(draw);\n// END DRAW LOOP\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","const GameOfLife = {\n\tvertexSource: `\n\t\tprecision highp float;\n\t\tattribute vec3 aPosition;\n\t\tvarying vec2 vTexturePosition;\n\t\tvarying vec2 vPosition;\n\t\tvoid main(void) {\n\t\t\tvPosition = aPosition.xy;\n\t\t\tvTexturePosition = vec2(aPosition.x + 1.0, -1.0 + aPosition.y) * 0.5;\n\t\t\tgl_Position = vec4(aPosition, 1.0);\n\t\t}\n\t`,\n\n\tfragmentSource: `\n\t\tprecision highp float;\n\t\tuniform sampler2D uSampler;\n\t\tvarying vec2 vTexturePosition;\n\t\tvarying vec2 vPosition;\n\t\tuniform vec2 uMousePosition;\n\t\tuniform highp float uWidth;\n\t\tuniform int uShouldUpdate;\n\n\t\tbool isLive(vec2 offset) {\n\t\t\t\tvec4 lastColor = texture2D(uSampler, vTexturePosition + offset);\n\t\t\t\tif (lastColor.r == 1.0) {\n\t\t\t\t\treturn true;\n\t\t\t\t} else {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t}\n\n\t\tvoid main(void) {\n\t\t\tvec4 lastColor = texture2D(uSampler, vTexturePosition);\n\n\t\t\tif (uShouldUpdate == 0) {\n\t\t\t\tgl_FragColor = lastColor;\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tfloat d = distance(uMousePosition, vPosition);\n\t\t\tif (d < 2.0/uWidth) {\n\t\t\t\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tint liveCount = 0;\n\t\t\tfloat step = 1.0/uWidth;\n\n\t\t\tif (isLive(vec2(-step, -step))) {liveCount++;}\n\t\t\tif (isLive(vec2(-step, 0))) {liveCount++;}\n\t\t\tif (isLive(vec2(-step, step))) {liveCount++;}\n\t\t\tif (isLive(vec2(0, -step))) {liveCount++;}\n\t\t\tif (isLive(vec2(0, step))) {liveCount++;}\n\t\t\tif (isLive(vec2(step, -step))) {liveCount++;}\n\t\t\tif (isLive(vec2(step, 0))) {liveCount++;}\n\t\t\tif (isLive(vec2(step, step))) {liveCount++;}\n\n\t\t\tif (liveCount < 2) {\n\t\t\t\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\n\t\t\t} else if (liveCount < 4) {\n\t\t\t\tgl_FragColor = vec4(0, 1.0, 0, 1.0);\n\t\t\t} else if (liveCount < 8) {\n\t\t\t\tgl_FragColor = vec4(0, 0, 1.0, 1.0);\n\t\t\t} else {\n\t\t\t\tgl_FragColor = vec4(1.0, 0, 1.0, 1.0);\n\t\t\t}\n\n\t\t\tbool selfIsLive = isLive(vec2(0,0));\n\t\t\tif (selfIsLive && (liveCount == 2 || liveCount == 3)) {\n\t\t\t\tif (lastColor.g < 1.0) {\n\t\t\t\t\tgl_FragColor = lastColor + vec4(1.0, 0.01, 0.0, 1.0);\n\t\t\t\t} else {\n\t\t\t\t\tgl_FragColor = lastColor + vec4(1.0, 0.0, 0.01, 1.0);\n\t\t\t\t}\n\t\t\t} else if (!selfIsLive && (liveCount == 3)) {\n\t\t\t\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\n\t\t\t} else {\n\t\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.8);\n\t\t\t}\n\t\t}\n\t`\n};\nexport default GameOfLife;\n\n\n\n// WEBPACK FOOTER //\n// ./src/programs/gameoflife.js","import {createProgram, createTexture} from './webgl';\n\nexport default class StateProgram {\n\tconstructor({shaderSource}) {\n\t\tlet {gl, shaderProgram} = createProgram(shaderSource.vertexSource, shaderSource.fragmentSource);\n\t\tthis.gl = gl;\n\t\tthis.shaderProgram = shaderProgram;\n\t\tthis.currentState = 0;\n\n\t\t// INITIALIZE BUFFERS\n\t\tthis.vertexBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tthis.vertices = [\n\t\t\t1, 1, 0,\n\t\t\t-1, 1, 0,\n\t\t\t1, -1, 0,\n\t\t\t-1, -1, 0\n\t\t];\n\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(this.vertices), gl.STATIC_DRAW);\n\t\t// END INITIALIZE BUFFERS\n\n\t\t// POINTERS\n\t\tconst aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\t\tgl.enableVertexAttribArray(aPosition);\n\t\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\n\t\tconst uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\t\tgl.uniform1f(uWidth, gl.canvas.width);\n\n\t\tthis.uShouldUpdate = gl.getUniformLocation(shaderProgram, \"uShouldUpdate\");\n\n\t\tthis.tTexture0 = createTexture();\n\t\tthis.tTexture1 = createTexture();\n\n\t\tthis.frameBuffer = gl.createFramebuffer();\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\tthis.frameBuffer.width = gl.canvas.width;\n\t\tthis.frameBuffer.height = gl.canvas.height;\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, this.frameBuffer.width, this.frameBuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\t\tvar renderBuffer = gl.createRenderbuffer();\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, this.frameBuffer.width, this.frameBuffer.height);\n\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t}\n\n\tsetState(state) {\n\t\tconst gl = this.gl;\n\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, state);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t}\n\n\tdrawState() {\n\t\tconst gl = this.gl;\n\t\tgl.uniform1i(this.uShouldUpdate, 0);\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\tif (this.currentState == 0) {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t} else {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t}\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t}\n\n\tincrementState() {\n\t\tconst gl = this.gl;\n\t\tgl.uniform1i(this.uShouldUpdate, 1);\n\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, this.frameBuffer);\n\t\tif (this.currentState == 0) {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture0);\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture1, 0);\n\t\t} else {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, this.tTexture1);\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, this.tTexture0, 0);\n\t\t}\n\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, this.vertexBuffer);\n\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, this.vertices.length / 3);\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, null);\n\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\t\tthis.currentState = (this.currentState + 1) % 2;\n\t}\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/state-program.js"],"sourceRoot":""}