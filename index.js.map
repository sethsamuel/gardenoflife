{"version":3,"sources":["webpack:///index.js","webpack:///webpack/bootstrap 77e8687aed4223b49882","webpack:///./src/index.js","webpack:///./src/webgl-wrapper.js"],"names":["modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","_webglWrapper","_webglWrapper2","console","log","vertexSource","fragmentSource","gl","shaderProgram","draw","uniform2f","uMousePosition","mousePosition","bindFramebuffer","FRAMEBUFFER","frameBuffer","flip","bindTexture","TEXTURE_2D","tTexture0","framebufferTexture2D","COLOR_ATTACHMENT0","tTexture1","drawArrays","TRIANGLE_STRIP","vertices","length","requestAnimationFrame","canvas","vertexBuffer","createBuffer","bindBuffer","ARRAY_BUFFER","bufferData","Float32Array","STATIC_DRAW","aPosition","getAttribLocation","enableVertexAttribArray","vertexAttribPointer","FLOAT","uWidth","getUniformLocation","createTexture","activeTexture","TEXTURE0","texParameteri","TEXTURE_MIN_FILTER","NEAREST","TEXTURE_MAG_FILTER","TEXTURE_WRAP_S","REPEAT","TEXTURE_WRAP_T","createFramebuffer","width","height","texImage2D","RGBA","UNSIGNED_BYTE","renderBuffer","createRenderbuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_COMPONENT16","framebufferRenderbuffer","DEPTH_ATTACHMENT","addEventListener","evt","clientX","clientY","clearColor","clear","COLOR_BUFFER_BIT","initialCanvas","document","createElement","context","getContext","globalAlpha","i","j","Math","random","fillStyle","fillRect","uniform1f","createProgram","callback","resize","size","pow","floor","log2","min","window","innerWidth","innerHeight","viewport","body","querySelector","vertexShader","createShader","VERTEX_SHADER","shaderSource","compileShader","getShaderParameter","COMPILE_STATUS","Error","getShaderInfoLog","fragmentShader","FRAGMENT_SHADER","attachShader","linkProgram","getProgramParameter","LINK_STATUS","useProgram","Object","defineProperty","value"],"mappings":"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","file":"index.js","sourcesContent":["/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"/\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\tmodule.exports = __webpack_require__(1);\n\n\n/***/ },\n/* 1 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tvar _webglWrapper = __webpack_require__(2);\n\t\n\tvar _webglWrapper2 = _interopRequireDefault(_webglWrapper);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tconsole.log('üê≠');\n\t\n\tvar vertexSource = '\\n\\tprecision highp float;\\n\\tattribute vec3 aPosition;\\n\\tvarying vec2 vTexturePosition;\\n\\tvarying vec2 vPosition;\\n\\tvoid main(void) {\\n\\t\\tvPosition = aPosition.xy;\\n\\t\\tvTexturePosition = vec2(aPosition.x + 1.0, -1.0 + aPosition.y) * 0.5;\\n\\t\\tgl_Position = vec4(aPosition, 1.0);\\n\\t}\\n';\n\t\n\tvar fragmentSource = '\\n\\tprecision highp float;\\n\\tuniform sampler2D uSampler;\\n\\tvarying vec2 vTexturePosition;\\n\\tvarying vec2 vPosition;\\n\\tuniform vec2 uMousePosition;\\n\\tuniform highp float uWidth;\\n\\n\\tbool isLive(vec2 offset) {\\n\\t\\t\\tvec4 lastColor = texture2D(uSampler, vTexturePosition + offset);\\n\\t\\t\\tif (lastColor.r == 1.0) {\\n\\t\\t\\t\\treturn true;\\n\\t\\t\\t} else {\\n\\t\\t\\t\\treturn false;\\n\\t\\t\\t}\\n\\t}\\n\\n\\tvoid main(void) {\\n\\t\\tfloat saturation = 1.0 - distance(uMousePosition, vPosition);\\n\\t\\tint liveCount = 0;\\n\\t\\tfloat step = 1.0/uWidth;\\n\\t\\t// step = 0.0;\\n\\n\\t\\tif (isLive(vec2(-step, -step))) {liveCount++;}\\n\\t\\tif (isLive(vec2(-step, 0))) {liveCount++;}\\n\\t\\tif (isLive(vec2(-step, step))) {liveCount++;}\\n\\t\\tif (isLive(vec2(0, -step))) {liveCount++;}\\n\\t\\tif (isLive(vec2(0, step))) {liveCount++;}\\n\\t\\tif (isLive(vec2(step, -step))) {liveCount++;}\\n\\t\\tif (isLive(vec2(step, 0))) {liveCount++;}\\n\\t\\tif (isLive(vec2(step, step))) {liveCount++;}\\n\\n\\t\\tif (liveCount < 2) {\\n\\t\\t\\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t} else if (liveCount < 4) {\\n\\t\\t\\tgl_FragColor = vec4(0, 1.0, 0, 1.0);\\n\\t\\t} else if (liveCount < 8) {\\n\\t\\t\\tgl_FragColor = vec4(0, 0, 1.0, 1.0);\\n\\t\\t} else {\\n\\t\\t\\tgl_FragColor = vec4(1.0, 0, 1.0, 1.0);\\n\\t\\t}\\n\\t\\t// gl_FragColor = vec4(0, 0, 0, 1.0);\\n\\t\\tbool selfIsLive = isLive(vec2(0,0));\\n\\t\\tvec4 lastColor = texture2D(uSampler, vTexturePosition);\\n\\t\\tif (selfIsLive && (liveCount == 2 || liveCount == 3)) {\\n\\t\\t\\tif (lastColor.g < 1.0) {\\n\\t\\t\\t\\tgl_FragColor = lastColor + vec4(1.0, 0.01, 0.0, 1.0);\\n\\t\\t\\t} else {\\n\\t\\t\\t\\tgl_FragColor = lastColor + vec4(1.0, 0.0, 0.01, 1.0);\\n\\t\\t\\t}\\n\\t\\t} else if (!selfIsLive && (liveCount == 3)) {\\n\\t\\t\\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\\n\\t\\t} else {\\n\\t\\t\\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.8);\\n\\t\\t}\\n\\n\\t\\t// gl_FragColor = texture2D(uSampler, vTexturePosition);\\n\\t\\t// gl_FragColor = vec4(lastColor.r + saturation, lastColor.gba);\\n\\t\\t// gl_FragColor = vec4(saturation, 0, 0, 1.0);\\n\\t}\\n';\n\t\n\t(0, _webglWrapper2.default)(vertexSource, fragmentSource, function (gl, shaderProgram) {\n\t\tconsole.log(gl.canvas);\n\t\n\t\t// INITIALIZE BUFFERS\n\t\tvar vertexBuffer = gl.createBuffer();\n\t\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\t\tvar vertices = [1, 1, 0, -1, 1, 0, 1, -1, 0, -1, -1, 0];\n\t\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\t\t// END INITIALIZE BUFFERS\n\t\n\t\t// POINTERS\n\t\tvar aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\t\tgl.enableVertexAttribArray(aPosition);\n\t\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\t\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\t\n\t\tvar uSampler = gl.getUniformLocation(shaderProgram, \"uSampler\");\n\t\tvar uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\t\tvar uMousePosition = gl.getUniformLocation(shaderProgram, \"uMousePosition\");\n\t\tvar tTexture0 = gl.createTexture();\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture0);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\t\n\t\tvar tTexture1 = gl.createTexture();\n\t\tgl.activeTexture(gl.TEXTURE0);\n\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture1);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\t\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\t\n\t\tvar frameBuffer = gl.createFramebuffer();\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\t\tframeBuffer.width = gl.canvas.width;\n\t\tframeBuffer.height = gl.canvas.height;\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, frameBuffer.width, frameBuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\t\n\t\tvar renderBuffer = gl.createRenderbuffer();\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n\t\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, frameBuffer.width, frameBuffer.height);\n\t\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n\t\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\n\t\t// END POINTERS\n\t\n\t\t// INTERACTION HANDLER\n\t\tvar mousePosition = [];\n\t\tgl.canvas.addEventListener('mousemove', function (evt) {\n\t\t\tmousePosition = [(evt.clientX / gl.canvas.width - 0.5) * 2.0, (1.0 - evt.clientY / gl.canvas.height - 0.5) * 2.0];\n\t\t\t// draw();\n\t\t});\n\t\t// END INTERACTION HANDLER\n\t\n\t\t// DRAW LOOP\n\t\tgl.clearColor(0, 0, 0, 1.0);\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\n\t\t//Initial state\n\t\tvar initialCanvas = document.createElement('canvas');\n\t\tinitialCanvas.width = gl.canvas.width;\n\t\tinitialCanvas.height = gl.canvas.height;\n\t\tvar context = initialCanvas.getContext('2d');\n\t\tcontext.globalAlpha = 1.0;\n\t\tfor (var i = 0; i < gl.canvas.width; i++) {\n\t\t\tfor (var j = 0; j < gl.canvas.width; j++) {\n\t\t\t\tif (Math.random() < 0.35) {\n\t\t\t\t\tcontext.fillStyle = 'red';\n\t\t\t\t\tcontext.fillRect(i, j, 1, 1);\n\t\t\t\t} else {\n\t\t\t\t\tcontext.fillStyle = 'black';\n\t\t\t\t\tcontext.fillRect(i, j, 1, 1);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture0);\n\t\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, initialCanvas);\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\n\t\tgl.uniform1f(uWidth, gl.canvas.width);\n\t\n\t\tvar flip = 0;\n\t\n\t\tfunction draw() {\n\t\t\t// Clear pixels and depth\n\t\t\t// console.log('Draw');\n\t\n\t\t\t// gl.bindTexture(gl.TEXTURE_2D, tTexture);\n\t\t\t// gl.generateMipmap(gl.TEXTURE_2D);\n\t\n\t\t\tgl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\t\n\t\t\t//Draw to frame buffer\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\t\t\tif (flip == 0) {\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture0);\n\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tTexture1, 0);\n\t\t\t} else {\n\t\t\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture1);\n\t\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tTexture0, 0);\n\t\t\t}\n\t\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, vertices.length / 3);\n\t\n\t\t\t//Draw to canvas\n\t\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t\t\tgl.drawArrays(gl.TRIANGLE_STRIP, 0, vertices.length / 3);\n\t\n\t\t\tflip = (flip + 1) % 2;\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\t\n\t\t\t// setTimeout(draw, 1000);\n\t\t\trequestAnimationFrame(draw);\n\t\t}\n\t\trequestAnimationFrame(draw);\n\t\t// END DRAW LOOP\n\t});\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t\tvalue: true\n\t});\n\texports.default = createProgram;\n\tfunction createProgram(vertexSource, fragmentSource, callback) {\n\t\t// GLOBALS\n\t\tvar body = document.body;\n\t\tvar canvas = document.querySelector('canvas');\n\t\tvar gl = canvas.getContext('webgl');\n\t\t// END GLOBALS\n\t\n\t\t// BEGIN WINDOW SIZING\n\t\tfunction resize() {\n\t\t\tvar size = Math.pow(2, Math.floor(Math.log2(Math.min(window.innerWidth, window.innerHeight))));\n\t\t\t// const size = 256;\n\t\t\tcanvas.width = size;\n\t\t\tcanvas.height = size;\n\t\n\t\t\t// Set viewport\n\t\t\tgl.viewport(0, 0, canvas.width, canvas.height);\n\t\t}\n\t\tresize();\n\t\n\t\twindow.addEventListener('resize', resize);\n\t\t// END WINDOW SIZING\n\t\n\t\t// GL SETTINGS\n\t\n\t\t// Color to draw on clear\n\t\tgl.clearColor(0, 0, 0, 1);\n\t\n\t\t// Clear buffers\n\t\tgl.clear(gl.COLOR_BUFFER_BIT);\n\t\n\t\t// END GL SETTINGS\n\t\n\t\t// INITIALIZE SHADERS\n\t\n\t\t// CREATE VERTEX SHADER\n\t\tvar vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\t\tgl.shaderSource(vertexShader, vertexSource);\n\t\tgl.compileShader(vertexShader);\n\t\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(vertexShader));\n\t\t} else {\n\t\t\tconsole.log(\"Vertex shader compiled\");\n\t\t}\n\t\t// END CREATE VERTEX SHADER\n\t\n\t\t// CREATE FRAGMENT SHADER\n\t\tvar fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\t\tgl.shaderSource(fragmentShader, fragmentSource);\n\t\tgl.compileShader(fragmentShader);\n\t\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n\t\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(fragmentShader));\n\t\t} else {\n\t\t\tconsole.log(\"Fragment shader compiled\");\n\t\t}\n\t\t// END CREATE FRAGMENT SHADER\n\t\n\t\t// COMPILE PROGRAM\n\t\tvar shaderProgram = gl.createProgram();\n\t\tgl.attachShader(shaderProgram, vertexShader);\n\t\tgl.attachShader(shaderProgram, fragmentShader);\n\t\tgl.linkProgram(shaderProgram);\n\t\n\t\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\t\tthrow new Error(\"Unable to initialize the shader program.\");\n\t\t} else {\n\t\t\tconsole.log(\"Initialized shader program\");\n\t\t}\n\t\tgl.useProgram(shaderProgram);\n\t\t// END COMPILE PROGRAM\n\t\n\t\t// END INITIALIZE SHADERS\n\t\n\t\n\t\tcallback(gl, shaderProgram);\n\t}\n\n/***/ }\n/******/ ]);\n\n\n// WEBPACK FOOTER //\n// index.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"/\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 77e8687aed4223b49882","import createProgram from './webgl-wrapper';\n\nconsole.log('üê≠');\n\nconst vertexSource = `\n\tprecision highp float;\n\tattribute vec3 aPosition;\n\tvarying vec2 vTexturePosition;\n\tvarying vec2 vPosition;\n\tvoid main(void) {\n\t\tvPosition = aPosition.xy;\n\t\tvTexturePosition = vec2(aPosition.x + 1.0, -1.0 + aPosition.y) * 0.5;\n\t\tgl_Position = vec4(aPosition, 1.0);\n\t}\n`;\n\nconst fragmentSource = `\n\tprecision highp float;\n\tuniform sampler2D uSampler;\n\tvarying vec2 vTexturePosition;\n\tvarying vec2 vPosition;\n\tuniform vec2 uMousePosition;\n\tuniform highp float uWidth;\n\n\tbool isLive(vec2 offset) {\n\t\t\tvec4 lastColor = texture2D(uSampler, vTexturePosition + offset);\n\t\t\tif (lastColor.r == 1.0) {\n\t\t\t\treturn true;\n\t\t\t} else {\n\t\t\t\treturn false;\n\t\t\t}\n\t}\n\n\tvoid main(void) {\n\t\tfloat saturation = 1.0 - distance(uMousePosition, vPosition);\n\t\tint liveCount = 0;\n\t\tfloat step = 1.0/uWidth;\n\t\t// step = 0.0;\n\n\t\tif (isLive(vec2(-step, -step))) {liveCount++;}\n\t\tif (isLive(vec2(-step, 0))) {liveCount++;}\n\t\tif (isLive(vec2(-step, step))) {liveCount++;}\n\t\tif (isLive(vec2(0, -step))) {liveCount++;}\n\t\tif (isLive(vec2(0, step))) {liveCount++;}\n\t\tif (isLive(vec2(step, -step))) {liveCount++;}\n\t\tif (isLive(vec2(step, 0))) {liveCount++;}\n\t\tif (isLive(vec2(step, step))) {liveCount++;}\n\n\t\tif (liveCount < 2) {\n\t\t\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\n\t\t} else if (liveCount < 4) {\n\t\t\tgl_FragColor = vec4(0, 1.0, 0, 1.0);\n\t\t} else if (liveCount < 8) {\n\t\t\tgl_FragColor = vec4(0, 0, 1.0, 1.0);\n\t\t} else {\n\t\t\tgl_FragColor = vec4(1.0, 0, 1.0, 1.0);\n\t\t}\n\t\t// gl_FragColor = vec4(0, 0, 0, 1.0);\n\t\tbool selfIsLive = isLive(vec2(0,0));\n\t\tvec4 lastColor = texture2D(uSampler, vTexturePosition);\n\t\tif (selfIsLive && (liveCount == 2 || liveCount == 3)) {\n\t\t\tif (lastColor.g < 1.0) {\n\t\t\t\tgl_FragColor = lastColor + vec4(1.0, 0.01, 0.0, 1.0);\n\t\t\t} else {\n\t\t\t\tgl_FragColor = lastColor + vec4(1.0, 0.0, 0.01, 1.0);\n\t\t\t}\n\t\t} else if (!selfIsLive && (liveCount == 3)) {\n\t\t\tgl_FragColor = vec4(1.0, 0, 0, 1.0);\n\t\t} else {\n\t\t\tgl_FragColor = vec4(0.0, 0.0, 0.0, 0.8);\n\t\t}\n\n\t\t// gl_FragColor = texture2D(uSampler, vTexturePosition);\n\t\t// gl_FragColor = vec4(lastColor.r + saturation, lastColor.gba);\n\t\t// gl_FragColor = vec4(saturation, 0, 0, 1.0);\n\t}\n`;\n\ncreateProgram(vertexSource, fragmentSource, (gl, shaderProgram) => {\n\tconsole.log(gl.canvas);\n\n\t// INITIALIZE BUFFERS\n\tconst vertexBuffer = gl.createBuffer();\n\tgl.bindBuffer(gl.ARRAY_BUFFER, vertexBuffer);\n\tconst vertices = [\n\t\t1, 1, 0,\n\t\t-1, 1, 0,\n\t\t1, -1, 0,\n\t\t-1, -1, 0\n\t];\n\tgl.bufferData(gl.ARRAY_BUFFER, new Float32Array(vertices), gl.STATIC_DRAW);\n\t// END INITIALIZE BUFFERS\n\n\t// POINTERS\n\tconst aPosition = gl.getAttribLocation(shaderProgram, \"aPosition\");\n\tgl.enableVertexAttribArray(aPosition);\n\t//gl.vertexAttribPointer(index, size, type, normalized, stride, offset);\n\tgl.vertexAttribPointer(aPosition, 3, gl.FLOAT, false, 0, 0);\n\n\tconst uSampler = gl.getUniformLocation(shaderProgram, \"uSampler\");\n\tconst uWidth = gl.getUniformLocation(shaderProgram, \"uWidth\");\n\tconst uMousePosition = gl.getUniformLocation(shaderProgram, \"uMousePosition\");\n\tconst tTexture0 = gl.createTexture();\n\tgl.activeTexture(gl.TEXTURE0);\n\tgl.bindTexture(gl.TEXTURE_2D, tTexture0);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\n\tconst tTexture1 = gl.createTexture();\n\tgl.activeTexture(gl.TEXTURE0);\n\tgl.bindTexture(gl.TEXTURE_2D, tTexture1);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MIN_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_MAG_FILTER, gl.NEAREST);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_S, gl.REPEAT);\n\tgl.texParameteri(gl.TEXTURE_2D, gl.TEXTURE_WRAP_T, gl.REPEAT);\n\n\tconst frameBuffer = gl.createFramebuffer();\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\tframeBuffer.width = gl.canvas.width;\n\tframeBuffer.height = gl.canvas.height;\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, frameBuffer.width, frameBuffer.height, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n\n\tvar renderBuffer = gl.createRenderbuffer();\n\tgl.bindRenderbuffer(gl.RENDERBUFFER, renderBuffer);\n\tgl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_COMPONENT16, frameBuffer.width, frameBuffer.height);\n\tgl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_ATTACHMENT, gl.RENDERBUFFER, renderBuffer);\n\n\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\tgl.bindRenderbuffer(gl.RENDERBUFFER, null);\n\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\n\n\n\t// END POINTERS\n\n\t// INTERACTION HANDLER\n\tvar mousePosition = [];\n\tgl.canvas.addEventListener('mousemove', evt => {\n\t  mousePosition = [\n\t    (evt.clientX/gl.canvas.width - 0.5) * 2.0,\n\t    (1.0 - evt.clientY/gl.canvas.height - 0.5) * 2.0\n\t  ];\n\t\t// draw();\n\t});\n\t// END INTERACTION HANDLER\n\n\t// DRAW LOOP\n\tgl.clearColor(0, 0, 0, 1.0);\n\tgl.clear(gl.COLOR_BUFFER_BIT);\n\n\t//Initial state\n\tconst initialCanvas = document.createElement('canvas');\n\tinitialCanvas.width = gl.canvas.width;\n\tinitialCanvas.height = gl.canvas.height;\n\tconst context = initialCanvas.getContext('2d');\n\tcontext.globalAlpha = 1.0;\n\tfor (var i = 0; i < gl.canvas.width; i++) {\n\t\tfor (var j = 0; j < gl.canvas.width; j++) {\n\t\t\tif (Math.random() < 0.35) {\n\t\t\t\tcontext.fillStyle = 'red';\n\t\t\t\tcontext.fillRect(i, j, 1, 1);\n\t\t\t} else {\n\t\t\t\tcontext.fillStyle = 'black';\n\t\t\t\tcontext.fillRect(i, j, 1, 1);\n\t\t\t}\n\t\t}\n\t}\n\tgl.bindTexture(gl.TEXTURE_2D, tTexture0);\n\tgl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, gl.RGBA, gl.UNSIGNED_BYTE, initialCanvas);\n\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\tgl.uniform1f(uWidth, gl.canvas.width);\n\n\tlet flip = 0;\n\n\tfunction draw() {\n\t  // Clear pixels and depth\n\t\t// console.log('Draw');\n\n\t\t// gl.bindTexture(gl.TEXTURE_2D, tTexture);\n\t\t// gl.generateMipmap(gl.TEXTURE_2D);\n\n\t\tgl.uniform2f(uMousePosition, mousePosition[0], mousePosition[1]);\n\n\t\t//Draw to frame buffer\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, frameBuffer);\n\t\tif (flip == 0) {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture0);\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tTexture1, 0);\n\t\t} else {\n\t\t\tgl.bindTexture(gl.TEXTURE_2D, tTexture1);\n\t\t\tgl.framebufferTexture2D(gl.FRAMEBUFFER, gl.COLOR_ATTACHMENT0, gl.TEXTURE_2D, tTexture0, 0);\n\t\t}\n\n\t  gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertices.length / 3);\n\n\t\t//Draw to canvas\n\t\tgl.bindFramebuffer(gl.FRAMEBUFFER, null);\n\t  gl.drawArrays(gl.TRIANGLE_STRIP, 0, vertices.length / 3);\n\n\t\tflip = (flip + 1) % 2;\n\t\tgl.bindTexture(gl.TEXTURE_2D, null);\n\n\t\t// setTimeout(draw, 1000);\n\t  requestAnimationFrame(draw);\n\t}\n\trequestAnimationFrame(draw);\n\t// END DRAW LOOP\n});\n\n\n\n// WEBPACK FOOTER //\n// ./src/index.js","export default function createProgram(vertexSource, fragmentSource, callback) {\n\t// GLOBALS\n\tconst body = document.body;\n\tconst canvas = document.querySelector('canvas');\n\tconst gl = canvas.getContext('webgl');\n\t// END GLOBALS\n\n\t// BEGIN WINDOW SIZING\n\tfunction resize() {\n\t\tconst size = Math.pow(2,Math.floor(Math.log2(Math.min(window.innerWidth, window.innerHeight))));\n\t\t// const size = 256;\n\t\tcanvas.width = size;\n\t\tcanvas.height = size;\n\n\t\t// Set viewport\n\t\tgl.viewport(0, 0, canvas.width, canvas.height);\n\t}\n\tresize();\n\n\twindow.addEventListener('resize', resize);\n\t// END WINDOW SIZING\n\n\t// GL SETTINGS\n\n\t// Color to draw on clear\n\tgl.clearColor(0,0,0,1);\n\n\t// Clear buffers\n\tgl.clear(gl.COLOR_BUFFER_BIT);\n\n\t// END GL SETTINGS\n\n\t// INITIALIZE SHADERS\n\n\t// CREATE VERTEX SHADER\n\tconst vertexShader = gl.createShader(gl.VERTEX_SHADER);\n\tgl.shaderSource(vertexShader, vertexSource);\n\tgl.compileShader(vertexShader);\n\tif (!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)) {\n\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(vertexShader));\n\t}else{\n\t\tconsole.log(\"Vertex shader compiled\");\n\t}\n\t// END CREATE VERTEX SHADER\n\n\t// CREATE FRAGMENT SHADER\n\tconst fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);\n\tgl.shaderSource(fragmentShader, fragmentSource);\n\tgl.compileShader(fragmentShader);\n\tif (!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)) {\n\t\tthrow new Error(\"An error occurred compiling the shader: \" + gl.getShaderInfoLog(fragmentShader));\n\t}else{\n\t\tconsole.log(\"Fragment shader compiled\");\n\t}\n\t// END CREATE FRAGMENT SHADER\n\n\t// COMPILE PROGRAM\n\tconst shaderProgram = gl.createProgram();\n\tgl.attachShader(shaderProgram, vertexShader);\n\tgl.attachShader(shaderProgram, fragmentShader);\n\tgl.linkProgram(shaderProgram);\n\n\tif (!gl.getProgramParameter(shaderProgram, gl.LINK_STATUS)) {\n\t\tthrow new Error(\"Unable to initialize the shader program.\");\n\t}else{\n\t\tconsole.log(\"Initialized shader program\");\n\t}\n\tgl.useProgram(shaderProgram);\n\t// END COMPILE PROGRAM\n\n\t// END INITIALIZE SHADERS\n\n\n\tcallback(gl, shaderProgram);\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/webgl-wrapper.js"],"sourceRoot":""}